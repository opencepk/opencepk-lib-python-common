---
repos:

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=500]
      - id: trailing-whitespace
      - id: detect-private-key
      - id: end-of-file-fixer
      - id: fix-encoding-pragma
      - id: file-contents-sorter
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]
  # -----------------------------
  # Checkov is a static code analysis tool for scanning infrastructure as code (IaC) files for misconfigurations
  # that may lead to security or compliance problems.
  # -----------------------------
  # Checkov includes more than 750 predefined policies to check for common misconfiguration issues.
  # Checkov also supports the creation and contribution of custom policies.
  # -----------------------------
  - repo: https://github.com/bridgecrewio/checkov.git
    rev: 3.2.171
    hooks:
      - id: checkov
  # -----------------------------
  # Gitleaks SAST tool for detecting and preventing hardcoded secrets like passwords, api keys, and tokens in git repos
  # -----------------------------
  # If you are knowingly committing something that is not a secret and gitleaks is catching it,
  # you can add an inline comment of '# gitleaks:allow' to the end of that line in your file.
  # This will instructs gitleaks to ignore that secret - example:
  #   some_non_secret_value = a1b2c3d4e5f6g7h8i9j0 # gitleaks:allow
  # -----------------------------
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.4
    hooks:
      - id: gitleaks
  # -----------------------------
  # # Generates Table of Contents in Markdown files
  # # -----------------------------
  - repo: https://github.com/frnmst/md-toc
    rev: 9.0.0
    hooks:
      - id: md-toc
        args: [-p, github]  # CLI options
  # -----------------------------
  # YAML Linting on yaml files for pre-commit and github actions
  # -----------------------------
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Check YAML syntax with yamllint
        args: [--strict, -c=.yamllint.yaml, '.']
        always_run: true
        pass_filenames: true

  # -----------------------------
  # PYPI bumpversion check
  # -----------------------------
  # - repo: local
  #   hooks:
  #     - id: install-pypi_bumpversion_check-requirements
  #       name: Install PYPI bumpversion check requirements
  #       entry: sh -c 'pip3 install -r ./opencepk_lib_python_common/pypi_bumpversion_check_package/pypi_bumpversion_check/requirements.txt && exit 0'
  #       language: system
  #       always_run: true

  # -----------------------------
  # PYPI bumpversion check
  # -----------------------------
  - repo: local
    hooks:
      - id: pypi_bumpversion_check
        name: Check version
        args: ['./pyproject.toml']
        entry: python3 -m opencepk_lib_python_common.pypi_bumpversion_check_package.pypi_bumpversion_check
        language: python
        pass_filenames: false  # Do not pass filenames to the hook (this is important to keep)
        additional_dependencies:
          - toml
          - requests


  - repo: local
    hooks:
      - id: unittest
        name: Run unit tests
        entry: python3 -m unittest opencepk_lib_python_common.find_and_replace_strings_package.tests.test_main
        language: system
        pass_filenames: false
        always_run: true

  - repo: local
    hooks:
      - id: toml build
        name: test the .toml package health
        entry: pip3 install .
        language: system
        pass_filenames: false
        always_run: true
